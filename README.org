
* BIMHAW: BashIng My Head Against a Wall

Cut the Gordian know of shell profiles on linux.

#+begin_quote
Whats the problem?
#+end_quote


Despite it being the most used interface as a linux user,
configuration of shells is unnecessarily obtuse and lacks many
important features.

#+begin_quote
I mean more specifically, and less ranty?
#+end_quote

1. Refactor shell startup scripts so that you can actually understand
  without thinking about it too much. 

Particularly the strange and subtle interactions between the system
shell (called "sh" or "posix shell" throughout despite whatever true
identity it has...).

2. Provide for different shell "profiles"

Having multiple profiles that are easily changed between is something
that I found a great need for in a system. There are multiple use
cases for this:

- Different profiles for different computers or environments.
- Always having a simple fall-back profile in case something breaks
  and you really shouldn't be working on debugging your dotfiles.
- Experimenting with new shell configurations without committing to
  it.
- Running demos, tutorials, or presentations where you want as little
  as possible to be able to go wrong.
- Activating your rice at the cafe, but then returning to your uncool
  comfort setup in the comfort of your home.

3. Proper (re)factoring of shell configuration scripts

In addition to being very aesthetically messy and difficult to debug
dumping all configuration into a single ~.bash_profile~ doesn't really
work well for multiple profiles. Multiple profiles would require a lot
of duplicated code/configuration since many of them will share the
same features. So we provide a rough module system. Where modules are
just scripts for different roles like environment, aliases, and
autocompletion placed in certain directories. The modules for each
profile are specified by name in configuration file.

#+begin_quote
Sounds complicated, whats the solution?
#+end_quote

** How it works

To refactor the shell startup we provide a single set of replacement
contentless startup files located at ~$HOME/.bimhaw/shell_dotfiles~.
These in turn source another set of startup scripts with clean
sensible names that are expected to be at ~$HOME/.bimhaw/active~.  These
clean sensible ones are provided as templates (using jinja2) so you
can easily generate many of them.  These scripts are also relatively
contentless and will only contain listings of which modules they are
to use (which come from the configuration file).

The template generation and configuration reader are implemented as a
python library and CLI tool.

#+begin_src bash
bimhaw profile.gen --name 'work'
#+end_src

This command will read ~.bimhaw/config.py~ (yes it uses ~exec~ so make
sure you only have trusted code which shouldn't be a problem since it
is just setting some strings).  It picks out the values for the 'work'
profile and fills them into the template script files. The generated
scripts as a collection are referred to as a single 'profile'. Once
these are generated they are saved in ~.bimhaw/profiles/work~.

However the ~shell_dotfiles~ expect profiles to be at the
~.binhaw/active~ location, which we make a symlink to one of the
profiles.  Running this command will both generate the profile and
symlink ~.bimhaw/active~ to ~.bimhaw/profiles/work~:

#+begin_src bash
bimhaw profile.load --name 'work'
#+end_src

However, the profile won't be active yet for your bash or posix shell
because it expects the following configuration files:

- ~$HOME/.profile~
- ~$HOME/.bash_profile~
- ~$HOME/.bash_logout~
- ~$HOME/.bashrc~

To link the shells in the ~.bimhaw~ directory to those expected
targets backup your existing shell scripts at the above locations and
run:

#+begin_src bash
bimhaw link-shells
#+end_src

Those startup files should now be symlinks to
~$HOME/.bimhaw/active/profile~ etc.

We've solved this terrible legacy cruft with a couple levels of
indirection and so is more complicated (i.e. not KISS some ugliness is
necessary to get shit done I'm afraid). Here is the high level linking
structure (roughly) to help you understand.:

#+begin_example
shell startup --> ~.profile~ --> ~.bimhaw/shell_dotfiles/profile~ --> ~.bimhaw/active~ --> ~.bimhaw/profiles/work~ --> ~.bimhaw/lib/shell~
#+end_example


** Configuring your shells: modules

There are a few different roles of modules:

- envs :: define environmental variables, call other executables,
          etc. most of the "code" part of configuration
- funcs :: functions in the bash or sh sense, whatever that means
- aliases :: things you create with the shell builtin ~alias~
- logouts :: scripts to run when you logout
- prompts :: choice of a prompt
- autocompletion :: autocompletion scripts (bash only)

The modules for posix shell are in ~.bimhaw/lib/shell/sh~ and for bash
they are in ~.bimhaw/lib/shell/bash~.

It's important to note that in ~bimhaw~ all modules in a profile that
are loaded for 'sh' will also be loaded for 'bash'. The modules
specified for bash will be /bash only/. This allows for "pure" and
"portable" posix sh scripts (we all know you ~sh~ scripts are only of
the highest quality and POSIX compliant...) and also configurations
with bashisms.

* Getting Started

Install it from the git repo directly:

#+begin_src bash
pip install git+https://github.com/salotz/bimhaw.git
#+end_src

Once you have it installed you will need to create a configuration
directory at ~$HOME/.bimhaw~.

You can and should do this with the initialization command:

#+begin_src bash
python -m bimhaw.init
#+end_src

Now you should have a ~$HOME/.bimhaw~ directory with some folders.

This will fail if the directory already exists.

Now that we have the configuration directory setup we want to set up a
profile to use.

To create profiles we run the main command line application:

#+begin_src bash
bimhaw profile.gen --name 'bimhaw'
#+end_src

If you run it like this you will create the default and only built-in
profile that bimhaw has called 'bimhaw'. If you want to create your
own profiles you will need to edit the ~~/.bimhaw/config.py~ file
which is discussed in [[*Creating new profiles][Creating new profiles]].

Now we need to activate this profile which is simply done by running:

#+begin_src bash
bimhaw profile.load --name 'bimhaw'
#+end_src

This simply makes the symbolic link ~.bimhaw/active~ point to the
specified profile directory.

And technically it will also rerun the ~profile.gen~ subcommand again,
so in the future you only have to run the one command.

#+begin_src bash
bimhaw profile --name bimhaw
#+end_src

To actually get this profile loaded upon startup of your shell we need
to link the actual shell startup files to the ones where the shell
programs expect them to be.

Please go and back up your current dotfiles, these dotfiles will need
to be turned into symbolic links:

- ~$HOME/.profile~
- ~$HOME/.bash_profile~
- ~$HOME/.bash_logout~
- ~$HOME/.bashrc~

Once they are backed up you can run:

#+begin_src bash
bimhaw link-shells
#+end_src

If you didn't delete or move the listed startup files then either do
so or run with the 'force' flag:

#+begin_src bash
bimhaw link-shells --force
#+end_src


** Creating new profiles

Lets say we want to create a common use profile.

We would edit the ~config.py~ file so that it looked something like
this:

#+begin_src python
  PROFILES = [
    'bimhaw',
    'common',
  ]

  # POSIX shell (whatever that is)
  SH_LOGIN_ENVS = {

    'bimhaw' : [
    ],

    'common' : [
    ],
  }



  SH_NONLOGIN_ENVS = {

    'bimhaw' : [
    ],

    'common' : [
    ],
  }


  # scripts to run on logout
  SH_LOGOUTS = {

    'bimhaw' : [
    ],

    'common' : [
    ],

  }


  # salotz.sh_aliases
  SH_ALIASES = {

    'bimhaw' : [
    ],

    'common' : [
    ],

  }


  # salotz.sh_funcs
  SH_FUNCS = {

    'bimhaw' : [
    ],

    'common' : [
    ],

  }


  SH_PROMPT = {
    'bimhaw' : 'default',
    'common' : 'default',
  }

  BASH_PROMPT = {
    'bimhaw' : 'default',
    'common' : 'default',
  }

  BASH_LOGIN_SH_ENVS = {

    'bimhaw' : [
    ],

    'common' : [
    ],
  }

  BASH_LOGIN_BASH_ENVS = {

    'bimhaw' : [
    ],

    'common' : [
    ],
  }


  BASH_NONLOGIN_ENVS = {

    'bimhaw' : [
    ],

    'common' : [
    ],
  }

  BASH_INTERACTIVE_ENVS = {

    'bimhaw' : [
    ],

    'common' : [
    ],
  }

  BASH_ALIASES = {

    'bimhaw' : [
    ],

    'common' : [
    ],
  }

  BASH_FUNCS = {

    'bimhaw' : [
    ],

    'common' : [
    ],
  }

  BASH_AUTOCOMPLETIONS = {
    'bimhaw' : [
    ],

    'common' : [
    ],
  }
#+end_src

Apologies for the verboseness, but I didn't want to commit to any
configuration system as of now.

Since there are no config files to differentiate the 'common' profile
from the 'bimhaw' it will be the same. You can add new content for it
by adding files to the folders in the ~lib~ directory.

To create this profile run:

#+begin_src bash
bimhaw profile.gen --name common
#+end_src

